version: 2
jobs:
  test:
    docker:
      - image: circleci/python:3.8-buster-node
        environment:
          SECRET_KEY: testingsecretkey
          SECURE_SSL_REDIRECT: false
          ALLOWED_HOSTS: localhost
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
          BIRDBATH_REQUIRED: false
      - image: circleci/postgres:12.3
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_HOST_AUTH_METHOD: trust
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{checksum "poetry.lock"}}
      - run:
          name: install python dependencies
          command: |
            curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.7.1 python3 -
            python -m venv venv
            . ./venv/bin/activate
            poetry install --no-ansi
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{checksum "poetry.lock"}}
      - run:
          name: install node dependencies
          command: |
            npm ci
      - run:
          name: Linting js
          command: |
            npm run lint:js
      - run:
          name: Linting css
          command: |
            npm run lint:css
      - run:
          name: Linting format
          command: |
            npm run lint:format
      - run:
          name: Front end tests
          command: |
            npm run test:coverage
      - run:
          name: compile static assets
          command: |
            npm run build:prod
      - run:
          name: Run Django tests
          command: |
            . venv/bin/activate
            pip install coverage
            isort --recursive --check-only --diff ./rca
            ./manage.py collectstatic --verbosity 0 --noinput --clear
            ./manage.py makemigrations --check --noinput
            ./manage.py check
            coverage run ./manage.py test --settings=rca.settings.test
            coverage report
            coverage xml
            bash <(curl -s https://codecov.io/bash) -t $COVERAGE_TOKEN
      - run:
          name: Run Black
          command: |
            . venv/bin/activate
            black --check --diff ./rca --exclude migrations/
  deploy_dev:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: deploy dev to heroku
          command: |
            echo "Deploying to Heroku. To see progress, go to: https://dashboard.heroku.com/apps/$HEROKU_APP_NAME_DEV/activity"
            curl -sf -X POST -m 900 https://heroku-deploy.torchbox.com/$HEROKU_APP_NAME_DEV/$CIRCLE_SHA1?key=$DEPLOYMENT_KEY -d "Content-Length: 0"
  deploy_staging:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: deploy staging to heroku
          command: |
            echo "Deploying to Heroku. To see progress, go to: https://dashboard.heroku.com/apps/$HEROKU_APP_NAME_STAGING/activity"
            curl -sf -X POST -m 900 https://heroku-deploy.torchbox.com/$HEROKU_APP_NAME_STAGING/$CIRCLE_SHA1?key=$DEPLOYMENT_KEY -d "Content-Length: 0"
  deploy_production:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: deploy master to heroku
          command: |
            echo "Deploying to Heroku. To see progress, go to: https://dashboard.heroku.com/apps/$HEROKU_APP_NAME_PRODUCTION/activity"
            curl -sf -X POST -m 900 https://heroku-deploy.torchbox.com/$HEROKU_APP_NAME_PRODUCTION/$CIRCLE_SHA1?key=$DEPLOYMENT_KEY -d "Content-Length: 0"

  copy_prod_to_dev:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: update packages
          command: 'apt-get update -y'
      - run:
          name: install curl, jq
          command: 'apt-get install -y curl jq'
      - run:
          name: Send POST request to FlightPath
          command: |
            export JOB_STATUS=$(curl -f -X POST -m 900 -H "Authorization: Token $FLIGHTPATH_AUTH_KEY" -d "source_key=$DEPLOYMENT_KEY&destination_key=$DEPLOYMENT_KEY&copy_media=1&from_backup=1" "https://flightpath.torchbox.com/copy/$HEROKU_APP_NAME_PRODUCTION/$HEROKU_APP_NAME_DEV/")
            echo $JOB_STATUS
            export JOB_ID=$(echo $JOB_STATUS | jq -r '.job_id')
            echo $JOB_ID

workflows:
  version: 2
  build-deploy:
    jobs:
      - test
      - deploy_dev:
          requires:
            - test
          filters:
            branches:
              only: dev
      - deploy_staging:
          requires:
            - test
          filters:
            branches:
              only: staging
      - confirm_deploy_production:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - test
            - confirm_deploy_production
          filters:
            branches:
              only: master
      - copy_prod_to_dev:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: dev
